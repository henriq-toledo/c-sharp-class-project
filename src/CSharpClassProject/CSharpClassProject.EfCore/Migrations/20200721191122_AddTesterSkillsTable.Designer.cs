// <auto-generated />
using CSharpClassProject.EfCore.Classes.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CSharpClassProject.EfCore.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20200721191122_AddTesterSkillsTable")]
    partial class AddTesterSkillsTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CSharpClassProject.EfCore.Classes.Entities.Developer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("Developers");
                });

            modelBuilder.Entity("CSharpClassProject.EfCore.Classes.Entities.DeveloperSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DeveloperId")
                        .HasColumnType("int");

                    b.Property<byte>("Skill")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("DeveloperId");

                    b.ToTable("DeveloperSkills");
                });

            modelBuilder.Entity("CSharpClassProject.EfCore.Classes.Entities.Tester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("Testers");
                });

            modelBuilder.Entity("CSharpClassProject.EfCore.Classes.Entities.TesterSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Skill")
                        .HasColumnType("tinyint");

                    b.Property<int>("TesterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TesterId");

                    b.ToTable("TesterSkills");
                });

            modelBuilder.Entity("CSharpClassProject.EfCore.Classes.Entities.DeveloperSkill", b =>
                {
                    b.HasOne("CSharpClassProject.EfCore.Classes.Entities.Developer", null)
                        .WithMany("Skills")
                        .HasForeignKey("DeveloperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CSharpClassProject.EfCore.Classes.Entities.TesterSkill", b =>
                {
                    b.HasOne("CSharpClassProject.EfCore.Classes.Entities.Tester", null)
                        .WithMany("Skills")
                        .HasForeignKey("TesterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
